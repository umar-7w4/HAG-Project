public without sharing class BudgetFundsTrannsferCoOp {
    
    @AuraEnabled
    public static boolean checkForTransferPath1(Double amount, String budgetId, String recBudId) {
        Budget__c senBud = [Select Id, OwnerId, Name, Type__c, RecordType__c, Status__c, Year__c, Brand__c, CurrencyIsoCode, Amount__c,Total_Funds_Transferred_In__c ,  Total_Funds_Transferred_Out__c, Remaining_Budget__c, Total_Committed_Amount__c, Parent_Budget__c from Budget__c where Id =: budgetId];
        Budget__c recBud = [Select Id, OwnerId, Name, Type__c, RecordType__c, Status__c, Year__c, Brand__c, CurrencyIsoCode, Amount__c,Total_Funds_Transferred_In__c ,  Total_Funds_Transferred_Out__c, Remaining_Budget__c, Total_Committed_Amount__c, Parent_Budget__c from Budget__c where Id =: recBudId];
        Id owner = [Select Id, OwnerId from Budget__c where Id = : budgetId].OwnerId;
        
        if(BudgetReallocationDirectorsApex.getRoleSubordinateUsers(owner).contains(recBud.OwnerId) && recBud.RecordType__c.contains('Co-Op Budget') && senBud.Brand__c ==recBud.Brand__c && recBud.Year__c == senBud.Year__c && senBud.Amount__c >= amount ){
            return true;
        }
        return false;
    }
    
     
    @AuraEnabled
    public static String transferFundsPath1(Double amount, String budgetId, String recBudId,  String comments) {
        Budget__c senBud = [Select Id, OwnerId, Name, Type__c, RecordType__c, Status__c, Year__c, Brand__c, CurrencyIsoCode, Amount__c, Total_Funds_Transferred_In__c , Total_Funds_Transferred_Out__c, Remaining_Budget__c, Total_Committed_Amount__c, Parent_Budget__c from Budget__c where Id =: budgetId];
        Budget__c recBud = [Select Id, OwnerId, Name, Type__c, RecordType__c, Status__c, Year__c, Brand__c, CurrencyIsoCode, Amount__c, Total_Funds_Transferred_In__c , Total_Funds_Transferred_Out__c, Remaining_Budget__c, Total_Committed_Amount__c, Parent_Budget__c from Budget__c where Id =: recBudId];
		Funds_Transfer__c fund = new Funds_Transfer__c();
        Double add1 = 0;
        Double add2 = 0;        
        if(checkForTransferPath1(amount, budgetId, recBudId) && senBud.Id!=recBud.Id && comments!=null && comments != ''){
            fund.Amount__c = amount;
            fund.Sending_Budget__c = budgetId;
            fund.Receiving_Budget__c = recBud.Id;
            fund.Sent_By__c = senBud.OwnerId;
            fund.Received_By__c = recBud.OwnerId;
            fund.Status__c = 'Complete';
            fund.Comments__c = comments;
            
            recBud.Amount__c += amount;
            
            if(recBud.Total_Funds_Transferred_In__c==null){
                add1 = 0 + amount;
            }
            else{
                add1 = recBud.Total_Funds_Transferred_In__c + amount;
            }
            recBud.Total_Funds_Transferred_In__c  = add1;
            
            senBud.Amount__c -= amount;
            
            if(senBud.Total_Funds_Transferred_Out__c==null){
                add2 = 0 + amount;
            }
            else{
                add2 = senBud.Total_Funds_Transferred_Out__c+ amount;
            }
            senBud.Total_Funds_Transferred_Out__c = add2;
            
            senBud.Automation_Date_Time__c = datetime.now();
            recBud.Automation_Date_Time__c = datetime.now();
        }
        //System.debug(buds[0]);
       // System.debug(bud);
        try{
            insert fund;
            update recBud;
            update senBud;
        }
        Catch(Exception e){
            System.debug(e.getMessage());
        }
        
        return budgetId;

    }
    
    
    @AuraEnabled
    public static boolean checkForTransferPath2(Double amount, String budgetId, String recBudId ) {
        Budget__c senBud = [Select Id, OwnerId, Name, Type__c, RecordType__c, Status__c, Year__c, Brand__c, CurrencyIsoCode, Amount__c, Total_Funds_Transferred_In__c , Total_Funds_Transferred_Out__c, Remaining_Budget__c, Total_Committed_Amount__c, Parent_Budget__c from Budget__c where Id =: budgetId];
        Budget__c recBud = [Select Id, OwnerId, Name, Type__c, RecordType__c, Status__c, Year__c, Brand__c, CurrencyIsoCode, Amount__c,Total_Funds_Transferred_In__c  ,  Total_Funds_Transferred_Out__c, Remaining_Budget__c, Total_Committed_Amount__c, Parent_Budget__c from Budget__c where Id =: recBudId];
        Id owner = [Select Id, OwnerId from Budget__c where Id = : budgetId].OwnerId;
        System.debug(BudgetReallocationDirectorsApex.getRoleSubordinateUsers(owner).contains(recBud.OwnerId));
        System.debug(recBud.Year__c+' '+senBud.Year__c);
        System.debug(senBud.Amount__c+' '+amount);
        System.debug(recBud.Type__c+' '+senBud.Type__c);
        System.debug(recBud.Status__c);
        if(BudgetReallocationDirectorsApex.getRoleSubordinateUsers(owner).contains(recBud.OwnerId) && recBud.Year__c == senBud.Year__c && senBud.Amount__c >= amount && recBud.Status__c == 'Approved' && senBud.Brand__c == recBud.Brand__c && recBud.RecordType__c.contains('Other Budget')){
            return true;
        }
        return false;
    }
   
       
    @AuraEnabled
    public static String transferFundsPath2(Double amount, String budgetId, String recBudId, String comments) {
        Budget__c senBud = [Select Id, OwnerId, Name, Type__c, RecordType__c, Status__c, Year__c, Brand__c, CurrencyIsoCode, Amount__c, Total_Funds_Transferred_In__c , Total_Funds_Transferred_Out__c, Remaining_Budget__c, Total_Committed_Amount__c, Parent_Budget__c from Budget__c where Id =: budgetId];
        Budget__c recBud = [Select Id, OwnerId, Name, Type__c, RecordType__c, Status__c, Year__c, Brand__c, CurrencyIsoCode, Amount__c, Total_Funds_Transferred_In__c , Total_Funds_Transferred_Out__c, Remaining_Budget__c, Total_Committed_Amount__c, Parent_Budget__c from Budget__c where Id =: recBudId];
		Funds_Transfer__c fund = new Funds_Transfer__c();
        Double add1 = 0;
        Double add2 = 0;        
        if(checkForTransferPath2(amount, budgetId, recBudId) && senBud.Id!=recBud.Id && comments!=null && comments != '' ){
            fund.Amount__c = amount;
            fund.Sending_Budget__c = budgetId;
            fund.Receiving_Budget__c = recBud.Id;
            fund.Sent_By__c = senBud.OwnerId;
            fund.Received_By__c = recBud.OwnerId;
            fund.Status__c = 'Complete';
            fund.Comments__c = comments;
            
            recBud.Amount__c += amount;
            
            if(recBud.Total_Funds_Transferred_In__c==null){
                add1 = 0 + amount;
            }
            else{
                add1 = recBud.Total_Funds_Transferred_In__c + amount;
            }
            recBud.Total_Funds_Transferred_In__c  = add1;
            
            senBud.Amount__c -= amount;
            
            if(senBud.Total_Funds_Transferred_Out__c==null){
                add2 = 0 + amount;
            }
            else{
                add2 = senBud.Total_Funds_Transferred_Out__c+ amount;
            }
            senBud.Total_Funds_Transferred_Out__c = add2;
            
            senBud.Automation_Date_Time__c = datetime.now();
            recBud.Automation_Date_Time__c = datetime.now();
        }
        //System.debug(buds[0]);
       // System.debug(bud);
        try{
            insert fund;
            update recBud;
            update senBud;
        } 
        Catch(Exception e){
            System.debug(e.getMessage());
        }
        
        return budgetId;

    }
    
    @AuraEnabled
    public static boolean checkDirectTransfer(String budgetId){
        String oId = [Select Id, OwnerId from Budget__c where Id =: budgetId].OwnerId;
        User us = [SELECT Id, Name, ProfileId FROM User where Id =: oId];
        String profileName = [Select Name from Profile where Id =: us.ProfileId].Name;
        if(profileName.contains('Seabourn')){
            return true;
        }
        return false;
    }
    
    @AuraEnabled
    public static boolean checkUserForDirector(String userId) {
        User us = [SELECT Id, Name, ProfileId FROM User where Id =: userId];
        String profileName = [Select Name from Profile where Id =: us.ProfileId].Name;
        if(profileName.contains('Sales Director/Manager') || profileName.contains('Sales Leadership')){
            return true;
        }
        return false;
    }
    
    @AuraEnabled
    public static boolean checkForTransferPath3(String budgetId, Double amount, String userId) {
        Budget__c senBud = [Select Id, OwnerId, Name, Type__c, RecordType__c, Status__c, Year__c, Brand__c, CurrencyIsoCode, Amount__c, Total_Funds_Transferred_Out__c, Remaining_Budget__c, Total_Committed_Amount__c, Parent_Budget__c from Budget__c where Id =: budgetId];
        List<Budget__c> buds = new List<Budget__c>();
        for(Budget__c i :  [Select Id, Name, OwnerId, Type__c, Amount__c, Total_Funds_Transferred_In__c, Year__c, Status__c , RecordType__c, Parent_Budget__c from Budget__c where OwnerId =: userId AND Type__c = 'Co-Op' AND Year__c =: senBud.Year__c]){
            if(i.RecordType__c.contains('Parent Budget')){
                buds.add(i);
            }
        }
        System.debug(buds);
        if(buds.size()>0 && checkUserForDirector(userId) && senBud.Amount__c>= amount ){
            return true;
        }
        return false;
    }
    
    @AuraEnabled
    public static String transferFundsPath3(String budgetId, Double amount, String userId, String comments) {
        Budget__c bud = [Select Id, OwnerId, Name, Type__c, RecordType__c, Status__c, Year__c, Brand__c, CurrencyIsoCode, Amount__c, Total_Funds_Transferred_Out__c, Remaining_Budget__c, Total_Committed_Amount__c, Parent_Budget__c from Budget__c where Id =: budgetId];
        List<Budget__c> buds = new List<Budget__c>();
        for(Budget__c i :  [Select Id, Name, OwnerId, Type__c, Amount__c, Total_Funds_Transferred_In__c, Year__c, Status__c , RecordType__c, Parent_Budget__c from Budget__c where OwnerId =: userId AND Type__c = 'Co-Op' AND Year__c =: bud.Year__c]){
            if(i.RecordType__c.contains('Parent Budget')){
                buds.add(i);
            }
        }
        Funds_Transfer__c fund = new Funds_Transfer__c();
        Double add1 = 0;
        Double add2 = 0;
        
        User us = [SELECT Id, Name, ProfileId FROM User where Id =: bud.OwnerId];
        String profileName = [Select Name from Profile where Id =: us.ProfileId].Name;
        
        System.debug(buds);
        if(checkForTransferPath3(budgetId, amount, userId) && comments!=null && comments != ''){
            if(profileName.contains('Seabourn')){
                fund.Amount__c = amount;
                fund.Sending_Budget__c = budgetId;
                fund.Receiving_Budget__c = buds[0].Id;
                fund.Sent_By__c = bud.OwnerId;
                fund.Received_By__c = buds[0].OwnerId;
                fund.Status__c = 'Complete';
                fund.Comments__c = comments;
                
                buds[0].Amount__c += amount;
                
                if(buds[0].Total_Funds_Transferred_In__c==null){
                    add1 = 0 + amount;
                }
                else{
                    add1 = buds[0].Total_Funds_Transferred_In__c + amount;
                }
                buds[0].Total_Funds_Transferred_In__c  = add1;
                
                bud.Amount__c -= amount;
                
                if(bud.Total_Funds_Transferred_Out__c==null){
                    add2 = 0 + amount;
                }
                else{
                    add2 = bud.Total_Funds_Transferred_Out__c+ amount;
                }
                bud.Total_Funds_Transferred_Out__c = add2;
                
                bud.Automation_Date_Time__c = datetime.now();
                buds[0].Automation_Date_Time__c = datetime.now();
                
                System.debug('Transfer Complete');
                
            }
            else if(profileName.contains('Princess')){
                fund.Amount__c = amount;
                fund.Sending_Budget__c = budgetId;
                fund.Receiving_Budget__c = buds[0].Id;
                fund.Sent_By__c = bud.OwnerId;
                fund.Received_By__c = buds[0].OwnerId;
                fund.Comments__c = comments;
            }
            else if(profileName.contains('Cunard')){
                System.debug(budgetId);
                fund.Amount__c = amount;
                fund.Sending_Budget__c = budgetId;
                fund.Receiving_Budget__c = buds[0].Id;
                fund.Sent_By__c = bud.OwnerId;
                fund.Received_By__c = buds[0].OwnerId;
                fund.Comments__c = comments;
            }
            else if(profileName.contains('Holland')){
                fund.Amount__c = amount;
                fund.Sending_Budget__c = budgetId;
                fund.Receiving_Budget__c = buds[0].Id;
                fund.Sent_By__c = bud.OwnerId;
                fund.Received_By__c = buds[0].OwnerId;   
                fund.Comments__c = comments;
            }
  
        }
        //System.debug(buds[0]);
        //System.debug(bud);
        try{
            insert fund;
            update buds;
            update bud;
        }
        Catch(Exception e){
            System.debug(e.getMessage());
        }
        
		if( profileName.contains('Princess')){
            Approval.ProcessSubmitRequest req1 = new Approval.ProcessSubmitRequest();
            req1.setComments('Submitting transfer fund record for approval.');
            req1.setObjectId(fund.Id);
            req1.setSubmitterId(bud.OwnerId); 
            req1.setSkipEntryCriteria(true);
            req1.setProcessDefinitionNameOrId('Princess_Director_Leadership_Funds_Tran');
            Approval.ProcessResult result = Approval.process(req1);
            System.debug('Princess Fund transfer Submitted for Approval');     
        }
        else if( profileName.contains('Cunard')){
            Approval.ProcessSubmitRequest req1 = new Approval.ProcessSubmitRequest();
            req1.setComments('Submitting transfer fund record for approval.');
            req1.setObjectId(fund.Id);
            req1.setSubmitterId(bud.OwnerId); 
            req1.setProcessDefinitionNameOrId('Cunard_Director_Leadership_Funds_Tran');
            Approval.ProcessResult result = Approval.process(req1);
            System.debug('Cunard Fund transfer Submitted for Approval');
        }
        else if( profileName.contains('Holland')){
            Approval.ProcessSubmitRequest req1 = new Approval.ProcessSubmitRequest();
            req1.setComments('Submitting transfer fund record for approval.');
            req1.setObjectId(fund.Id);
            req1.setSubmitterId(bud.OwnerId); 
            req1.setProcessDefinitionNameOrId('Holland_Director_Leadership_Funds_Tran');
            Approval.ProcessResult result = Approval.process(req1);
            System.debug('Holland Fund transfer Submitted for Approval');
        }

        return budgetId;

    }
    
    @AuraEnabled    
    public static Double getRemainingAmount(String budgetId){
        return [Select Id, Name, Amount__c from Budget__c Where Id =: budgetId].Amount__c;
    }
    

}

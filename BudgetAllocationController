({
	init : function(component, event, helper) {
        

        
        var action2 = component.get("c.getRemainingAmount");
        //console.log(component.get("v.recordId"));
        action2.setParams({"budgetId": component.get("v.recordId")});
        action2.setCallback(this, function(response){
            console.log(response.getReturnValue());
            var state = response.getState();
            if(state == 'SUCCESS') {
                component.set('v.remainingAmount', response.getReturnValue());
            }
        });
        $A.enqueueAction(action2);

	},
    
     
    submitForm: function (cmp, event, helper) {
        
        var amount = cmp.find("colors").get("v.value");
		var comments = cmp.find("comment").get("v.value");
        console.log(comments);
        
        console.log(amount);
        console.log(cmp.get("v.recordId"));
        var reAm = cmp.get('v.remainingAmount');
        console.log(reAm);
        console.log("====");
        
        
        var action1 = cmp.get("c.checkForManagerRecord");
        action1.setParams({"budgetId": cmp.get("v.recordId")});
        action1.setCallback(this, function(response){
            var state = response.getState();
            console.log('=====',response.getReturnValue());
            if(state == 'SUCCESS' && response.getReturnValue()==true && comments !=null && comments !='') {
                
                var action = cmp.get("c.transferFunds");
                action.setParams({"budgetId": cmp.get("v.recordId"), amount : amount, comments : comments });
                action.setCallback(this, function(res) {
                var response = res.getReturnValue();
                console.log(response);
                var state = action.getState();
                if((cmp.isValid() && state == "SUCCESS") && amount<=reAm ){
                               
                   var toastEvent = $A.get("e.force:showToast");
                   toastEvent.setParams({
                        title : 'Success',
                        message: 'Funds transfered successfully',
                        type: 'success',
                   });
                   toastEvent.fire();
                    
                   var navEvt = $A.get("e.force:navigateToSObject");
                   navEvt.setParams({
                     "recordId": response,
                     "slideDevName": "detail"
                   });
                   navEvt.fire();
                 } 
                 else if (amount>reAm) {
                    var toastEvent = $A.get("e.force:showToast");
                    toastEvent.setParams({
                        title : 'Error',
                        message:'Budget Transfer Amount exceeding Remaining Budget',
                        type: 'error',
                    });
                    toastEvent.fire();
                 }
                 else if (state == "ERROR") {
                 }
              });
              $A.enqueueAction(action);
                
            }
            else if(comments==null || comments==''){
                    var toastEvent = $A.get("e.force:showToast");
                    toastEvent.setParams({
                        title : 'Error',
                        message:'Please enter the comments.',
                        type: 'error',
                    });
                    toastEvent.fire();           
            }
            else if( response.getReturnValue()==false){
                    var toastEvent = $A.get("e.force:showToast");
                    toastEvent.setParams({
                        title : 'Error',
                        message:'No budget for the current type and year is available for the manager. Contact manager for additional information.',
                        type: 'error',
                    });
                    toastEvent.fire();
            }
        });
        $A.enqueueAction(action1);
        
        


     }    
})
